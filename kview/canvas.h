/*
* canvas.h -- Declaration of class KImageCanvas.
* Generated by newclass on Thu Oct  9 09:03:54 EST 1997.
*/
#ifndef SSK_CANVAS_H
#define SSK_CANVAS_H

#include<qstring.h>
#include<qwmatrix.h>
#include<qlabel.h>
#include<qscrollview.h>

class KVImageHolder;
class QPainter;

/**
* @short KImageCanvas
* @author Sirtaj Singh Kang (taj@kde.org)
* @version $Id$
*/
class KImageCanvas : public QScrollView
{
	Q_OBJECT
public:
	enum Error { OK, BadPath, BadFormat, NoMemory };
	/**
	* KImageCanvas Constructor
	*/
	KImageCanvas( QWidget *parent = 0 );

	/**
	* KImageCanvas Destructor
	*/
	virtual ~KImageCanvas();

	/**
	* Check canvas status. 
	* @return Status code
	* @see ::Error
	*/
	Error status() const;
public:
	/**
	*
	*/
	int load( const char *file, const char *URL=0 );
	/**
	*
	*/
	bool save( const char *URL, const char *format=0 );

	/**
	* Resets the image to as loaded.
	*/
	void reset();

	/**
	* Clears the image to blank.
	*/
	void clear();
	
	/**
	*
	*/
	void transformImage( const QWMatrix& mat );
	/**
	*
	*/
	void tileToDesktop() const;
	/**
	*
	*/
	void maxToDesktop() const;
	/**
	*
	*/
	void maxpectToDesktop() const;

	QImage getImage() const;

	QString url() const;

public slots:
	void setImage( const QImage& );

protected:
	/**
	*
	*/
	void resizeEvent( QResizeEvent * );

	/**
	* Sets the status.
	*/
	void setStatus( Error );

signals:
	/**
	*
	*/
	void imageSizeChanged();

private:
	Error		_status;
	QString		_file;

	QSize		_originalSize;
	KVImageHolder	*_client;

	QPixmap		*_orig;

	/**
	* Returns a pixmap that is to be used for editing.
	*/
	QPixmap *transPixmap();
};

inline void KImageCanvas::setStatus( Error e )
{
	_status = e;
}

inline QString KImageCanvas::url() const
{
	return _file;
}

class KVImageHolder : public QLabel
{
private:
	QRect _selection;

	bool _selected;

	QPainter *_painter;

public:
	KVImageHolder( QWidget *parent = 0 );

	virtual ~KVImageHolder();

	/**
	* Return the current selection.  If no selection has been made,
	* the returned rectangle will be null.
	*/
	QRect selected() const;

protected:
	void mousePressEvent( QMouseEvent * );
	void mouseMoveEvent( QMouseEvent * );

private:
	void drawSelect();
	void eraseSelect();
};

#endif // SSK_CANVAS_H
