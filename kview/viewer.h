/*
* viewer.h -- Declaration of class KImageViewer.
* Generated by newclass on Wed Oct 15 11:37:16 EST 1997.
*/
#ifndef SSK_VIEWER_H
#define SSK_VIEWER_H

#include<ktopwidget.h>
#include<qwmatrix.h>

class KDNDDropZone;

class KFiltMenuFactory;
class KConfigGroup;
class KImageCanvas;
class KImageFilter;
class KLocale;
class KMenuBar;
class KStatusBar;
class QMenuData;
class QPopupMenu;
class QMouseEvent;
class QString;
class QTimer;
class ImgListDlg;
class KFM;

/**
* @short KImageViewer
* @author Sirtaj Singh Kang (taj@kde.org)
* @version $Id$
*/
class KImageViewer : public KTopLevelWidget
{
	Q_OBJECT
public:
	/**
	* KImageViewer Constructor
	*/
	KImageViewer();

	/**
	* KImageViewer Destructor
	*/
	virtual ~KImageViewer();

	/**
	* This should be called _before_ show!
	*/
	void setFilterMenu( KFiltMenuFactory *filters );

	/**
	* Release the current cut buffer, if any.
	*/
	void freeCutBuffer();

public slots:
	// File operations
	/** */
	void load();
	/** */
	void saveAs();

	/** */
	void quitApp();

	// Size
	/** */
	void zoomIn10();
	/** */
	void zoomOut10();
	/** */
	void zoomIn200();
	/** */
	void zoomOut50();
	/** */
	void zoomCustom();

	// Desktop
	void tile();
	void max();
	void maxpect();

	// Transformation
	/** */
	void rotateClock();
	/** */
	void rotateAntiClock();
	/** */
	void flipVertical();
	/** */
	void flipHorizontal();

	void reset();

	// Information
	/** */
	void help();
	/** */
	void about();

	/**
	* Loads a file from a URL.
	*/
	void loadURL( const char *url );

	/**
	* Queues into the view list.
	*/
	void appendURL( const char *url, bool show = false );

	/**
	* Toggle full screen mode.
	*/
	void fullScreen();

	/**
	* Ask for print settings and print the image.
	*/
	void printImage();

	void cut();
	void copy();
	void paste();

               void contextPress(const QPoint&);

protected:

	virtual void closeEvent( QCloseEvent * );

	virtual void saveProperties( KConfig * ) const;
	virtual void restoreProperties( KConfig * );

	virtual void saveOptions( KConfig * ) const;
	virtual void restoreOptions( KConfig * );

private:
	enum TransferDir {
		Get,
		Put
	};

	/** */
	KImageCanvas	*_canvas;
	bool		_imageLoaded;
	
	int		_barFilterID;
	int		_popFilterID;
	
	/**
	* Active when menubar hidden
	*/
	QAccel		*_accel;

	/**
	* Always active
	*/
	QAccel		*_paccel;

	KMenuBar	*_menubar;
	KStatusBar	*_statusbar;
	QPopupMenu	*_contextMenu;

	QPopupMenu	*_file;
	QPopupMenu	*_edit;
	QPopupMenu	*_zoom;
	QPopupMenu	*_transform;
	QPopupMenu	*_desktop;
	QPopupMenu	*_aggreg;
	QPopupMenu	*_help;

	KFM		*_kfm;
	QString		*_transSrc;
	QString		*_transDest;
	TransferDir	_transDir;

	void makeRootMenu(QMenuData *);
	void makeRootMenu(KMenuBar * );
	void makePopupMenus();

	KFiltMenuFactory *_menuFact;

	QString 	*_pctBuffer;
	int		_lastPct;

	QTimer		*_msgTimer;

	ImgListDlg	*_imageList;

	QPoint		_posSave;
	QSize		_sizeSave;
	QWMatrix	_mat;

	int		_zoomFactor;

	bool		_autoMaxpect;

	void loadFile( const char *file, const char *url = 0 );

protected slots:
	void newViewer();
	void closeViewer();

private slots:

	void urlFetchDone();
	void urlFetchError( int code, const char *text );

	void invokeFilter( KImageFilter *filter );

	void setStatus( const char *status );
	void message( const char *message );
	void setProgress( int pct );

	void toggleImageList();

	void setSize();

signals:
	void wantHelp( const char *tag );

	void wantNewViewer();
	void wantToDie( KImageViewer * );

	void newCutBuffer( QPixmap *buffer );
};

#endif // SSK_VIEWER_H
